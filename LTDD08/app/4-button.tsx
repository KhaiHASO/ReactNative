import React, { useState } from 'react';
import { Alert, Pressable, ScrollView, StyleSheet, Text, TouchableOpacity, View } from 'react-native';

export default function ButtonDemo() {
  const [pressCount, setPressCount] = useState(0);
  const [longPressCount, setLongPressCount] = useState(0);

  return (
    <ScrollView style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <Text style={styles.title}>üîò Button Component Demo</Text>
        <Text style={styles.subtitle}>
          Button l√† component t∆∞∆°ng t√°c - c√≥ nhi·ªÅu c√°ch ƒë·ªÉ t·∫°o button trong React Native
        </Text>
      </View>

      {/* Gi·∫£i th√≠ch v·ªÅ Button components */}
      <View style={styles.explanationSection}>
        <Text style={styles.explanationTitle}>üìö C√°c lo·∫°i Button trong React Native:</Text>
        <Text style={styles.explanationText}>
          ‚Ä¢ <Text style={styles.boldText}>Button</Text>: Component c∆° b·∫£n, ch·ªâ c√≥ title v√† onPress{'\n'}
          ‚Ä¢ <Text style={styles.boldText}>Pressable</Text>: Component hi·ªán ƒë·∫°i, linh ho·∫°t nh·∫•t{'\n'}
          ‚Ä¢ <Text style={styles.boldText}>TouchableOpacity</Text>: Button v·ªõi hi·ªáu ·ª©ng fade{'\n'}
          ‚Ä¢ <Text style={styles.boldText}>TouchableHighlight</Text>: Button v·ªõi hi·ªáu ·ª©ng highlight{'\n'}
          ‚Ä¢ <Text style={styles.boldText}>TouchableWithoutFeedback</Text>: Button kh√¥ng c√≥ hi·ªáu ·ª©ng
        </Text>
      </View>

      {/* V√≠ d·ª• 1: Pressable c∆° b·∫£n */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>1. Pressable c∆° b·∫£n</Text>
        <Pressable 
          style={styles.basicPressable}
          onPress={() => Alert.alert('Button Pressed!', 'Pressable c∆° b·∫£n ƒë√£ ƒë∆∞·ª£c nh·∫•n')}
        >
          <Text style={styles.basicPressableText}>Nh·∫•n t√¥i</Text>
        </Pressable>
      </View>

      {/* V√≠ d·ª• 2: Pressable v·ªõi tr·∫°ng th√°i pressed */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>2. Pressable v·ªõi tr·∫°ng th√°i pressed</Text>
        <Pressable 
          style={({ pressed }) => [
            styles.statePressable,
            pressed && styles.statePressablePressed
          ]}
          onPress={() => console.log('State Pressable pressed!')}
        >
          <Text style={styles.statePressableText}>Nh·∫•n v√† gi·ªØ ƒë·ªÉ th·∫•y hi·ªáu ·ª©ng</Text>
        </Pressable>
      </View>

      {/* V√≠ d·ª• 3: TouchableOpacity */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>3. TouchableOpacity</Text>
        <TouchableOpacity 
          style={styles.touchableOpacity}
          onPress={() => Alert.alert('TouchableOpacity!', 'Button v·ªõi hi·ªáu ·ª©ng fade')}
          activeOpacity={0.6}
        >
          <Text style={styles.touchableOpacityText}>TouchableOpacity Button</Text>
        </TouchableOpacity>
      </View>

      {/* V√≠ d·ª• 4: Button v·ªõi m√†u s·∫Øc kh√°c nhau */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>4. Button v·ªõi m√†u s·∫Øc kh√°c nhau</Text>
        
        <View style={styles.colorContainer}>
          <Pressable 
            style={[styles.colorButton, { backgroundColor: '#F44336' }]}
            onPress={() => console.log('Red button pressed')}
          >
            <Text style={styles.colorButtonText}>ƒê·ªè</Text>
          </Pressable>

          <Pressable 
            style={[styles.colorButton, { backgroundColor: '#4CAF50' }]}
            onPress={() => console.log('Green button pressed')}
          >
            <Text style={styles.colorButtonText}>Xanh l√°</Text>
          </Pressable>

          <Pressable 
            style={[styles.colorButton, { backgroundColor: '#2196F3' }]}
            onPress={() => console.log('Blue button pressed')}
          >
            <Text style={styles.colorButtonText}>Xanh d∆∞∆°ng</Text>
          </Pressable>
        </View>
      </View>

      {/* V√≠ d·ª• 5: Button v·ªõi k√≠ch th∆∞·ªõc kh√°c nhau */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>5. Button v·ªõi k√≠ch th∆∞·ªõc kh√°c nhau</Text>
        
        <View style={styles.sizeContainer}>
          <Pressable 
            style={[styles.sizeButton, styles.smallButton]}
            onPress={() => console.log('Small button pressed')}
          >
            <Text style={styles.smallButtonText}>Nh·ªè</Text>
          </Pressable>

          <Pressable 
            style={[styles.sizeButton, styles.mediumButton]}
            onPress={() => console.log('Medium button pressed')}
          >
            <Text style={styles.mediumButtonText}>Trung b√¨nh</Text>
          </Pressable>

          <Pressable 
            style={[styles.sizeButton, styles.largeButton]}
            onPress={() => console.log('Large button pressed')}
          >
            <Text style={styles.largeButtonText}>L·ªõn</Text>
          </Pressable>
        </View>
      </View>

      {/* V√≠ d·ª• 6: Button v·ªõi border v√† borderRadius */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>6. Button v·ªõi border v√† borderRadius</Text>
        
        <View style={styles.borderContainer}>
          <Pressable 
            style={styles.borderButton}
            onPress={() => console.log('Border button pressed')}
          >
            <Text style={styles.borderButtonText}>Button v·ªõi border</Text>
          </Pressable>

          <Pressable 
            style={styles.roundedButton}
            onPress={() => console.log('Rounded button pressed')}
          >
            <Text style={styles.roundedButtonText}>Button bo tr√≤n</Text>
          </Pressable>

          <Pressable 
            style={styles.pillButton}
            onPress={() => console.log('Pill button pressed')}
          >
            <Text style={styles.pillButtonText}>Pill Button</Text>
          </Pressable>
        </View>
      </View>

      {/* V√≠ d·ª• 7: Button v·ªõi disabled state */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>7. Button v·ªõi disabled state</Text>
        
        <View style={styles.disabledContainer}>
          <Pressable 
            style={styles.enabledButton}
            onPress={() => console.log('Enabled button pressed')}
          >
            <Text style={styles.enabledButtonText}>Enabled Button</Text>
          </Pressable>

          <Pressable 
            style={styles.disabledButton}
            disabled={true}
            onPress={() => console.log('This should not fire')}
          >
            <Text style={styles.disabledButtonText}>Disabled Button</Text>
          </Pressable>
        </View>
      </View>

      {/* V√≠ d·ª• 8: Button v·ªõi counter */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>8. Button v·ªõi counter (state)</Text>
        
        <View style={styles.counterContainer}>
          <Text style={styles.counterText}>S·ªë l·∫ßn nh·∫•n: {pressCount}</Text>
          <Pressable 
            style={styles.counterButton}
            onPress={() => setPressCount(pressCount + 1)}
          >
            <Text style={styles.counterButtonText}>TƒÉng s·ªë</Text>
          </Pressable>
        </View>
      </View>

      {/* V√≠ d·ª• 9: Button v·ªõi onLongPress */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>9. Button v·ªõi onLongPress</Text>
        
        <View style={styles.longPressContainer}>
          <Text style={styles.counterText}>S·ªë l·∫ßn long press: {longPressCount}</Text>
          <Pressable 
            style={styles.longPressButton}
            onPress={() => console.log('Normal press')}
            onLongPress={() => setLongPressCount(longPressCount + 1)}
            delayLongPress={1000}
          >
            <Text style={styles.longPressButtonText}>Nh·∫•n v√† gi·ªØ 1 gi√¢y</Text>
          </Pressable>
        </View>
      </View>

      {/* V√≠ d·ª• 10: Button v·ªõi icon (text emoji) */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>10. Button v·ªõi icon (emoji)</Text>
        
        <View style={styles.iconContainer}>
          <Pressable 
            style={styles.iconButton}
            onPress={() => Alert.alert('‚ù§Ô∏è', 'Button v·ªõi icon tr√°i tim')}
          >
            <Text style={styles.iconButtonIcon}>‚ù§Ô∏è</Text>
            <Text style={styles.iconButtonText}>Like</Text>
          </Pressable>

          <Pressable 
            style={styles.iconButton}
            onPress={() => Alert.alert('üì§', 'Button v·ªõi icon share')}
          >
            <Text style={styles.iconButtonIcon}>üì§</Text>
            <Text style={styles.iconButtonText}>Share</Text>
          </Pressable>

          <Pressable 
            style={styles.iconButton}
            onPress={() => Alert.alert('‚öôÔ∏è', 'Button v·ªõi icon settings')}
          >
            <Text style={styles.iconButtonIcon}>‚öôÔ∏è</Text>
            <Text style={styles.iconButtonText}>Settings</Text>
          </Pressable>
        </View>
      </View>

      {/* V√≠ d·ª• 11: Button v·ªõi shadow */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>11. Button v·ªõi shadow</Text>
        
        <Pressable 
          style={styles.shadowButton}
          onPress={() => console.log('Shadow button pressed')}
        >
          <Text style={styles.shadowButtonText}>Button v·ªõi shadow</Text>
        </Pressable>
      </View>

      {/* V√≠ d·ª• 12: Button v·ªõi gradient effect (simulated) */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>12. Button v·ªõi gradient effect</Text>
        
        <Pressable 
          style={styles.gradientButton}
          onPress={() => console.log('Gradient button pressed')}
        >
          <Text style={styles.gradientButtonText}>Gradient Button</Text>
        </Pressable>
      </View>

      {/* Th√¥ng tin quan tr·ªçng */}
      <View style={styles.infoSection}>
        <Text style={styles.infoTitle}>‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:</Text>
        <Text style={styles.infoText}>
          ‚Ä¢ React Native kh√¥ng c√≥ Button component styled s·∫µn{'\n'}
          ‚Ä¢ S·ª≠ d·ª•ng Pressable cho c√°c tr∆∞·ªùng h·ª£p hi·ªán ƒë·∫°i{'\n'}
          ‚Ä¢ TouchableOpacity ph√π h·ª£p cho hi·ªáu ·ª©ng fade ƒë∆°n gi·∫£n{'\n'}
          ‚Ä¢ Lu√¥n set disabled state khi button kh√¥ng th·ªÉ s·ª≠ d·ª•ng{'\n'}
          ‚Ä¢ onLongPress c√≥ delay m·∫∑c ƒë·ªãnh l√† 500ms{'\n'}
          ‚Ä¢ H·ªó tr·ª£ accessibility v·ªõi accessibilityLabel v√† accessibilityHint
        </Text>
      </View>

      {/* Ki·∫øn th·ª©c b·ªï sung */}
      <View style={styles.knowledgeSection}>
        <Text style={styles.knowledgeTitle}>üí° Ki·∫øn th·ª©c b·ªï sung:</Text>
        <Text style={styles.knowledgeText}>
          ‚Ä¢ Pressable tr√™n iOS ‚Üí UIControl{'\n'}
          ‚Ä¢ Pressable tr√™n Android ‚Üí TouchableNativeFeedback{'\n'}
          ‚Ä¢ TouchableOpacity s·ª≠ d·ª•ng Animated API{'\n'}
          ‚Ä¢ C√≥ th·ªÉ t·∫°o custom button v·ªõi animation{'\n'}
          ‚Ä¢ H·ªó tr·ª£ haptic feedback tr√™n iOS{'\n'}
          ‚Ä¢ C√≥ th·ªÉ s·ª≠ d·ª•ng react-native-vector-icons cho icon
        </Text>
      </View>

      {/* Best practices */}
      <View style={styles.practicesSection}>
        <Text style={styles.practicesTitle}>‚ú® Best Practices:</Text>
        <Text style={styles.practicesText}>
          ‚Ä¢ S·ª≠ d·ª•ng Pressable cho button m·ªõi{'\n'}
          ‚Ä¢ Set minHeight 44px cho accessibility{'\n'}
          ‚Ä¢ Cung c·∫•p feedback visual khi pressed{'\n'}
          ‚Ä¢ S·ª≠ d·ª•ng consistent styling trong app{'\n'}
          ‚Ä¢ Test tr√™n c·∫£ iOS v√† Android{'\n'}
          ‚Ä¢ Th√™m loading state cho async actions
        </Text>
      </View>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    backgroundColor: '#FF9800',
    padding: 20,
    marginBottom: 20,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: 'white',
    textAlign: 'center',
  },
  subtitle: {
    fontSize: 16,
    color: 'white',
    textAlign: 'center',
    marginTop: 8,
  },
  section: {
    margin: 16,
    backgroundColor: 'white',
    borderRadius: 8,
    padding: 16,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 12,
  },

  // Gi·∫£i th√≠ch v·ªÅ Button components
  explanationSection: {
    margin: 16,
    backgroundColor: '#E3F2FD',
    borderRadius: 8,
    padding: 16,
    borderLeftWidth: 4,
    borderLeftColor: '#2196F3',
  },
  explanationTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#1976D2',
    marginBottom: 12,
  },
  explanationText: {
    fontSize: 14,
    color: '#424242',
    lineHeight: 20,
  },
  boldText: {
    fontWeight: 'bold',
    color: '#1976D2',
  },

  // V√≠ d·ª• 1: Pressable c∆° b·∫£n
  basicPressable: {
    backgroundColor: '#2196F3',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
    alignItems: 'center',
  },
  basicPressableText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },

  // V√≠ d·ª• 2: Pressable v·ªõi tr·∫°ng th√°i
  statePressable: {
    backgroundColor: '#4CAF50',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
    alignItems: 'center',
  },
  statePressablePressed: {
    backgroundColor: '#45a049',
    transform: [{ scale: 0.95 }],
  },
  statePressableText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },

  // V√≠ d·ª• 3: TouchableOpacity
  touchableOpacity: {
    backgroundColor: '#9C27B0',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
    alignItems: 'center',
  },
  touchableOpacityText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },

  // V√≠ d·ª• 4: Button v·ªõi m√†u s·∫Øc
  colorContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    flexWrap: 'wrap',
  },
  colorButton: {
    paddingHorizontal: 16,
    paddingVertical: 10,
    borderRadius: 6,
    marginVertical: 4,
    minWidth: 80,
    alignItems: 'center',
  },
  colorButtonText: {
    color: 'white',
    fontSize: 14,
    fontWeight: 'bold',
  },

  // V√≠ d·ª• 5: Button v·ªõi k√≠ch th∆∞·ªõc
  sizeContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    alignItems: 'center',
  },
  sizeButton: {
    borderRadius: 6,
    alignItems: 'center',
    justifyContent: 'center',
  },
  smallButton: {
    backgroundColor: '#FF5722',
    paddingHorizontal: 12,
    paddingVertical: 8,
  },
  mediumButton: {
    backgroundColor: '#FF5722',
    paddingHorizontal: 20,
    paddingVertical: 12,
  },
  largeButton: {
    backgroundColor: '#FF5722',
    paddingHorizontal: 28,
    paddingVertical: 16,
  },
  smallButtonText: {
    color: 'white',
    fontSize: 12,
    fontWeight: 'bold',
  },
  mediumButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
  largeButtonText: {
    color: 'white',
    fontSize: 20,
    fontWeight: 'bold',
  },

  // V√≠ d·ª• 6: Button v·ªõi border
  borderContainer: {
    gap: 12,
  },
  borderButton: {
    backgroundColor: 'transparent',
    borderWidth: 2,
    borderColor: '#2196F3',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
    alignItems: 'center',
  },
  borderButtonText: {
    color: '#2196F3',
    fontSize: 16,
    fontWeight: 'bold',
  },
  roundedButton: {
    backgroundColor: '#4CAF50',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 20,
    alignItems: 'center',
  },
  roundedButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
  pillButton: {
    backgroundColor: '#FF9800',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 25,
    alignItems: 'center',
  },
  pillButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },

  // V√≠ d·ª• 7: Button disabled
  disabledContainer: {
    gap: 12,
  },
  enabledButton: {
    backgroundColor: '#4CAF50',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
    alignItems: 'center',
  },
  enabledButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
  disabledButton: {
    backgroundColor: '#CCCCCC',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
    alignItems: 'center',
  },
  disabledButtonText: {
    color: '#666666',
    fontSize: 16,
    fontWeight: 'bold',
  },

  // V√≠ d·ª• 8: Counter button
  counterContainer: {
    alignItems: 'center',
    gap: 12,
  },
  counterText: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
  },
  counterButton: {
    backgroundColor: '#E91E63',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
    alignItems: 'center',
  },
  counterButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },

  // V√≠ d·ª• 9: Long press button
  longPressContainer: {
    alignItems: 'center',
    gap: 12,
  },
  longPressButton: {
    backgroundColor: '#673AB7',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
    alignItems: 'center',
  },
  longPressButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },

  // V√≠ d·ª• 10: Icon buttons
  iconContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
  },
  iconButton: {
    backgroundColor: '#607D8B',
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderRadius: 8,
    alignItems: 'center',
    minWidth: 80,
  },
  iconButtonIcon: {
    fontSize: 20,
    marginBottom: 4,
  },
  iconButtonText: {
    color: 'white',
    fontSize: 12,
    fontWeight: 'bold',
  },

  // V√≠ d·ª• 11: Shadow button
  shadowButton: {
    backgroundColor: '#795548',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
    alignItems: 'center',
    elevation: 8,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 8,
  },
  shadowButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },

  // V√≠ d·ª• 12: Gradient button (simulated)
  gradientButton: {
    backgroundColor: '#FF6B6B',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
    alignItems: 'center',
    borderWidth: 2,
    borderColor: '#FF5252',
  },
  gradientButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },

  // Th√¥ng tin quan tr·ªçng
  infoSection: {
    margin: 16,
    backgroundColor: '#FFEBEE',
    borderRadius: 8,
    padding: 16,
    borderLeftWidth: 4,
    borderLeftColor: '#F44336',
  },
  infoTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#C62828',
    marginBottom: 12,
  },
  infoText: {
    fontSize: 14,
    color: '#424242',
    lineHeight: 20,
  },

  // Ki·∫øn th·ª©c b·ªï sung
  knowledgeSection: {
    margin: 16,
    backgroundColor: '#E8F5E8',
    borderRadius: 8,
    padding: 16,
    borderLeftWidth: 4,
    borderLeftColor: '#4CAF50',
  },
  knowledgeTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#2E7D32',
    marginBottom: 12,
  },
  knowledgeText: {
    fontSize: 14,
    color: '#424242',
    lineHeight: 20,
  },

  // Best practices
  practicesSection: {
    margin: 16,
    backgroundColor: '#FFF3E0',
    borderRadius: 8,
    padding: 16,
    borderLeftWidth: 4,
    borderLeftColor: '#FF9800',
  },
  practicesTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#F57C00',
    marginBottom: 12,
  },
  practicesText: {
    fontSize: 14,
    color: '#424242',
    lineHeight: 20,
  },
});
